# vulnerability_detector/storage.py
import json
import os
from typing import List, Dict

def save_results(vulns: List[Dict], filename: str = "scan_results", file_format: str = "json") -> None:
    """
    Save vulnerability scan results to a file.
    
    Args:
        vulns: List of vulnerability dictionaries
        filename: Name of the output file (without extension)
        file_format: Output format ('json', 'md', 'txt')
    """
    if not vulns:
        print("No vulnerabilities to save.")
        return

    file_format = file_format.lower()
    
    if file_format == "json":
        path = f"{filename}.json"
        with open(path, "w", encoding="utf-8") as f:
            json.dump(vulns, f, indent=4)
    elif file_format in ["md", "markdown"]:
        path = f"{filename}.md"
        with open(path, "w", encoding="utf-8") as f:
            f.write("# Vulnerability Scan Results\n\n")
            for v in vulns:
                f.write(f"**Line {v.get('line_number', '?')}: {v.get('issue_text', 'Unknown')}**\n\n")
                f.write(f"- Severity: {v.get('severity', 'Unknown')}\n")
                if v.get("ai_explanation"):
                    f.write(f"- Explanation: {v['ai_explanation']}\n")
                f.write("\n---\n\n")
    elif file_format in ["txt"]:
        path = f"{filename}.txt"
        with open(path, "w", encoding="utf-8") as f:
            for v in vulns:
                f.write(f"Line {v.get('line_number', '?')}: {v.get('issue_text', 'Unknown')}\n")
                f.write(f"Severity: {v.get('severity', 'Unknown')}\n")
                if v.get("ai_explanation"):
                    f.write(f"Explanation: {v['ai_explanation']}\n")
                f.write("\n---\n\n")
    else:
        raise ValueError(f"Unsupported file format: {file_format}")

    print(f"Results saved to {path}")
