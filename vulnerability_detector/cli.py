# vuln_detector/cli.py
import sys
from .utils import create_temp_file, cleanup_file
from .scanner import run_bandit
from .parser import parse_bandit_results
from .explainer import explain_vulnerability
from .storage import save_results

def analyze_code(code: str):
    tmp_path = create_temp_file(code)
    try:
        raw = run_bandit(tmp_path)
        vulns = parse_bandit_results(raw)
        if not vulns:
            print("No vulnerabilities detected.")
            return []

        results = []
        for v in vulns:
            snippet = "\n".join(code.splitlines()[max(0, v["line_number"]-3): v["line_number"]+2])
            explanation = explain_vulnerability(snippet, v["issue_text"], v["line_number"], v["severity"])
            v["ai_explanation"] = explanation
            results.append(v)

        save_results(results)
        print("Scan complete. Results saved.")
        return results
    finally:
        cleanup_file(tmp_path)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        with open(sys.argv[1], "r", encoding="utf-8") as f:
            code = f.read()
    else:
        print("Paste code then Ctrl+Z (Windows) or Ctrl+D (Unix):")
        code = sys.stdin.read()
    analyze_code(code)
